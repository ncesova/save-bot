import type { MyContext, Settings } from "../types";
import { Composer, InlineKeyboard } from "grammy";

const settingsCommand = new Composer<MyContext>();

const SETTINGS_PREFIX = "settings:toggle:";

settingsCommand.command("settings", async (ctx) => {
  const userId = ctx.from?.id;
  if (!userId) return;

  const currentSettings = ctx.db.getSettings(userId);

  const formattedSettings = getFormattedSettings(currentSettings);

  await ctx.reply(formattedSettings, {
    parse_mode: "HTML",
    reply_markup: getSettingsKeyboard(currentSettings),
  });
});

settingsCommand.callbackQuery(
  new RegExp(
    `^${SETTINGS_PREFIX}(sendYoursDeleted|sendYoursEdited|notifyOnDeleted|notifyOnEdited)$`
  ),
  async (ctx) => {
    const userId = ctx.from?.id;
    if (!userId) return;

    const settingKey = ctx.match[1] as keyof Settings;

    const { newValue, settings } = ctx.db.toggleSetting(userId, settingKey);

    await ctx.answerCallbackQuery({
      text: getToggleResponse(settingKey, newValue),
      show_alert: false,
    });

    const updatedMessage = getFormattedSettings(settings);

    try {
      await ctx.editMessageText(updatedMessage, {
        parse_mode: "HTML",
        reply_markup: getSettingsKeyboard(settings),
      });
    } catch {
      await ctx.reply(updatedMessage, {
        parse_mode: "HTML",
        reply_markup: getSettingsKeyboard(settings),
      });
    }
  }
);

function getFormattedSettings(settings: Settings) {
  const message = `
<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>

<b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π:</b>
‚Ä¢ –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${
    settings.sendYoursDeleted ? "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" : "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
  }
‚Ä¢ –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${
    settings.sendYoursEdited ? "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" : "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
  }

<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ –∑–≤—É–∫–æ–º:</b>
‚Ä¢ –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: ${settings.notifyOnDeleted ? "üîî –í–∫–ª" : "üîï –í—ã–∫–ª"}
‚Ä¢ –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: ${settings.notifyOnEdited ? "üîî –í–∫–ª" : "üîï –í—ã–∫–ª"}

–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç.`;

  return message;
}

function getSettingsKeyboard(settings: Settings) {
  return new InlineKeyboard()
    .text(
      `${settings.sendYoursDeleted ? "‚úÖ" : "‚ùå"} –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ`,
      `${SETTINGS_PREFIX}sendYoursDeleted`
    )
    .row()
    .text(
      `${settings.sendYoursEdited ? "‚úÖ" : "‚ùå"} –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ`,
      `${SETTINGS_PREFIX}sendYoursEdited`
    )
    .row()
    .text(
      `${settings.notifyOnDeleted ? "üîî" : "üîï"} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: —É–¥–∞–ª–µ–Ω–∏–µ`,
      `${SETTINGS_PREFIX}notifyOnDeleted`
    )
    .row()
    .text(
      `${settings.notifyOnEdited ? "üîî" : "üîï"} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –∏–∑–º–µ–Ω–µ–Ω–∏–µ`,
      `${SETTINGS_PREFIX}notifyOnEdited`
    );
}

function getToggleResponse(key: keyof Settings, newValue: boolean) {
  const status = newValue ? "–≤–∫–ª—é—á–µ–Ω–æ" : "–≤—ã–∫–ª—é—á–µ–Ω–æ";

  if (key === "sendYoursDeleted") {
    return `–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ${status}.`;
  }

  if (key === "sendYoursEdited") {
    return `–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ${status}.`;
  }

  if (key === "notifyOnDeleted") {
    return `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${status}.`;
  }

  if (key === "notifyOnEdited") {
    return `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ ${status}.`;
  }

  return `–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.`;
}

export default settingsCommand;
